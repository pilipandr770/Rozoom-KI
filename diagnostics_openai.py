#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OpenAI API —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""
import os
import sys
import logging
import socket
import ssl
import json
import time
import traceback
from urllib.parse import urlparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_dns_resolution(domain):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç DNS-—Ä–µ–∑–æ–ª–≤–∏–Ω–≥ –¥–æ–º–µ–Ω–∞"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è {domain}...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ IPv4 –∏ IPv6 –∞–¥—Ä–µ—Å–∞
        addrs_info = socket.getaddrinfo(domain, None)
        
        ipv4_addrs = []
        ipv6_addrs = []
        
        for addr_info in addrs_info:
            family, socktype, proto, canonname, sockaddr = addr_info
            if family == socket.AF_INET:  # IPv4
                ipv4_addrs.append(sockaddr[0])
            elif family == socket.AF_INET6:  # IPv6
                ipv6_addrs.append(sockaddr[0])
        
        print(f"‚úÖ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:")
        print(f"  IPv4 –∞–¥—Ä–µ—Å–∞: {', '.join(ipv4_addrs) if ipv4_addrs else '–Ω–µ—Ç'}")
        print(f"  IPv6 –∞–¥—Ä–µ—Å–∞: {', '.join(ipv6_addrs) if ipv6_addrs else '–Ω–µ—Ç'}")
        
        return True, {"ipv4": ipv4_addrs, "ipv6": ipv6_addrs}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞: {str(e)}")
        traceback.print_exc(file=sys.stdout)
        return False, {"error": str(e)}

def check_tls_connection(domain, port=443):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print(f"üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {domain}:{port}...")
    try:
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.create_default_context()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ SSL
        with socket.create_connection((domain, port)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
                cert = ssock.getpeercert()
                cipher = ssock.cipher()
                
                print(f"‚úÖ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:")
                print(f"  –ü—Ä–æ—Ç–æ–∫–æ–ª: {ssock.version()}")
                print(f"  –®–∏—Ñ—Ä: {cipher[0]} ({cipher[2]} –±–∏—Ç)")
                print(f"  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω: {dict(cert['subject'])[('commonName',)]}")
                print(f"  –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {cert['notAfter']}")
                
                return True, {
                    "protocol": ssock.version(),
                    "cipher": cipher[0],
                    "bits": cipher[2],
                    "issuer": dict(cert['issuer'])[('commonName',)],
                    "valid_until": cert['notAfter']
                }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        traceback.print_exc(file=sys.stdout)
        return False, {"error": str(e)}

def test_http_request(url):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    print(f"üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}...")
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.netloc
        path = parsed_url.path or "/"
        
        # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = ssl.create_default_context()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ SSL
        with socket.create_connection((domain, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as ssock:
                # –§–æ—Ä–º–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å
                request = f"HEAD {path} HTTP/1.1\r\n"
                request += f"Host: {domain}\r\n"
                request += "Connection: close\r\n"
                request += "User-Agent: OpenAI-Diagnostics/1.0\r\n"
                request += "\r\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                ssock.send(request.encode())
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                response = b""
                while True:
                    data = ssock.recv(4096)
                    if not data:
                        break
                    response += data
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                response_text = response.decode('utf-8', errors='ignore')
                lines = response_text.split('\r\n')
                status_line = lines[0]
                headers = {}
                
                for line in lines[1:]:
                    if ': ' in line:
                        key, value = line.split(': ', 1)
                        headers[key] = value
                
                print(f"‚úÖ HTTP –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω:")
                print(f"  –°—Ç–∞—Ç—É—Å: {status_line}")
                print(f"  –°–µ—Ä–≤–µ—Ä: {headers.get('Server', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                
                return True, {
                    "status": status_line,
                    "server": headers.get('Server', '–Ω–µ —É–∫–∞–∑–∞–Ω'),
                    "headers": headers
                }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        traceback.print_exc(file=sys.stdout)
        return False, {"error": str(e)}

def check_openai_api():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...\n")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    if not api_key.startswith("sk-"):
        print("‚ùå OPENAI_API_KEY –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª–∏–Ω–∞: {len(api_key)})")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥–∞
    domain = "api.openai.com"
    dns_ok, dns_info = check_dns_resolution(domain)
    if not dns_ok:
        print("‚ùå DNS —Ä–µ–∑–æ–ª–≤–∏–Ω–≥ api.openai.com –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    tls_ok, tls_info = check_tls_connection(domain)
    if not tls_ok:
        print("‚ùå TLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å api.openai.com –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    # 4. –¢–µ—Å—Ç HTTP –∑–∞–ø—Ä–æ—Å–∞
    http_ok, http_info = test_http_request("https://api.openai.com/v1/models")
    if not http_ok:
        print("‚ùå HTTP –∑–∞–ø—Ä–æ—Å –∫ api.openai.com –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
    http_proxy = os.getenv("HTTP_PROXY")
    https_proxy = os.getenv("HTTPS_PROXY")
    no_proxy = os.getenv("NO_PROXY")
    
    print("\nüì° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏:")
    print(f"  HTTP_PROXY: {http_proxy or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"  HTTPS_PROXY: {https_proxy or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"  NO_PROXY: {no_proxy or '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IPv6
    ipv4_only = os.getenv("OPENAI_FORCE_IPV4", "false").lower() in ("true", "1", "yes")
    print(f"\nüåê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ IPv4: {'–≤–∫–ª—é—á–µ–Ω–æ' if ipv4_only else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    if 'ipv6' in dns_info and dns_info['ipv6'] and not ipv4_only:
        print("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã IPv6 –∞–¥—Ä–µ—Å–∞, –Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π IPv4 –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        print("   –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å OPENAI_FORCE_IPV4=true")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n‚úÖ –ë–∞–∑–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("   –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ API, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gunicorn –∏ –ø–∞—Ç—á–∏–Ω–≥ gevent.")
    
    return True

if __name__ == "__main__":
    try:
        from app import create_app
        
        app = create_app()
        
        with app.app_context():
            check_openai_api()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        traceback.print_exc(file=sys.stdout)
        print("\n–í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        check_openai_api()
