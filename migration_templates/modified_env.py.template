#!/usr/bin/env python3
"""
modified_env.py.template

Модифицированный шаблон env.py для Alembic, который поддерживает
каскадное удаление таблиц (CASCADE) при автоматической генерации миграций.
"""

import os
from logging.config import fileConfig

from sqlalchemy import engine_from_config, pool, text
from alembic import context

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
# from myapp import mymodel
# target_metadata = mymodel.Base.metadata
from flask import current_app
config.set_main_option(
    'sqlalchemy.url',
    current_app.config.get(
        'SQLALCHEMY_DATABASE_URI').replace('%', '%%'))
target_metadata = current_app.extensions['migrate'].db.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.


def run_migrations_offline():
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True
    )

    with context.begin_transaction():
        context.run_migrations()


def include_object(object, name, type_, reflected, compare_to):
    """Настраивает, какие объекты включать в автогенерацию миграций"""
    return True


def process_revision_directives(context, revision, directives):
    """Настраивает генерацию скриптов миграции, включая опцию CASCADE"""
    # Для каждой операции DROP TABLE добавляем опцию cascade=True
    if directives and len(directives) > 0:
        script = directives[0]
        if hasattr(script, 'ops'):
            for op in script.ops:
                # Проверяем, является ли операция DropTableOp
                if hasattr(op, 'table_name') and op.__class__.__name__ == 'DropTableOp':
                    # Добавляем опцию CASCADE
                    op.kw['cascade'] = True


def run_migrations_online():
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    connectable = engine_from_config(
        config.get_section(config.config_ini_section),
        prefix='sqlalchemy.',
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        # Отключение внешних ключей не используется, т.к. требует прав superuser
        # Вместо этого используем опцию CASCADE при удалении таблиц
        
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            process_revision_directives=process_revision_directives,
            include_object=include_object,
        )

        try:
            with context.begin_transaction():
                context.run_migrations()
        finally:
            # Здесь не нужно восстанавливать ограничения
            pass


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
