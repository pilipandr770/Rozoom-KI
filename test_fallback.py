#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback —Å–∏—Å—Ç–µ–º—ã OpenAI
"""
from app import create_app
from app.services.openai_service import OpenAIService
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_fallback_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã OpenAI...\n")

    app = create_app()

    with app.app_context():
        try:
            print("1. –°–æ–∑–¥–∞–Ω–∏–µ OpenAI —Å–µ—Ä–≤–∏—Å–∞...")
            openai_service = OpenAIService()
            print("‚úÖ OpenAI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")

            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result = openai_service.generate_blog_content_fallback(
                topic="Artificial Intelligence",
                keywords="AI, machine learning, automation",
                language="en"
            )

            if result and 'title' in result and 'content' in result:
                print("‚úÖ Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}")
                print(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(result['content'])} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   –ú–µ—Ç–∞-–æ–ø–∏—Å–∞–Ω–∏–µ: {result['meta_description'][:50]}...")
            else:
                print("‚ùå Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

            print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_FALLBACK_ENABLED...")
            import os
            fallback_enabled = os.getenv('OPENAI_FALLBACK_ENABLED', 'true').lower() in ('true', 'yes', '1')
            print(f"   Fallback —Ä–µ–∂–∏–º: {'–≤–∫–ª—é—á–µ–Ω' if fallback_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return False

    return True

if __name__ == "__main__":
    success = test_fallback_system()
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
