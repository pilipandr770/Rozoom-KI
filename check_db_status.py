#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ production
"""
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, text, inspect

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è PostgreSQL
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)

    # –î–æ–±–∞–≤–ª—è–µ–º SSL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if 'postgresql://' in database_url:
        if '?' not in database_url:
            database_url += '?sslmode=require'
        else:
            database_url += '&sslmode=require'

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
        engine = create_engine(database_url)

        with engine.connect() as conn:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            if 'users' in tables:
                columns = [col['name'] for col in inspector.get_columns('users')]
                print(f"üìã –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã users: {columns}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ is_admin
                if 'is_admin' in columns:
                    print("‚úÖ –°—Ç–æ–ª–±–µ—Ü is_admin –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")
                else:
                    print("‚ùå –°—Ç–æ–ª–±–µ—Ü is_admin –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")

                # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = conn.execute(text("SELECT COUNT(*) FROM users"))
                count = result.scalar()
                print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É admin_users
            if 'admin_users' in tables:
                columns = [col['name'] for col in inspector.get_columns('admin_users')]
                print(f"üìã –°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã admin_users: {columns}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ is_admin
                if 'is_admin' in columns:
                    print("‚úÖ –°—Ç–æ–ª–±–µ—Ü is_admin –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admin_users")
                else:
                    print("‚ùå –°—Ç–æ–ª–±–µ—Ü is_admin –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admin_users")

                # –°—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
                result = conn.execute(text("SELECT COUNT(*) FROM admin_users"))
                count = result.scalar()
                print(f"üëë –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: {count}")

            return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False

if __name__ == "__main__":
    success = check_database_status()
    if success:
        print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–µ–Ω–∞.")
