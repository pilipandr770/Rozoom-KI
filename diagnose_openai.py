#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å OpenAI API –≤ production
"""
import os
import logging
from app import create_app
from app.services.openai_service import OpenAIService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def diagnose_openai_issues():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å OpenAI API"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å OpenAI API...\n")

    app = create_app()

    with app.app_context():
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
            api_key = app.config.get('OPENAI_API_KEY')
            if not api_key:
                print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return

            print(f"‚úÖ OPENAI_API_KEY –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)})")
            print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {api_key[:10]}...")

            # 2. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ OpenAI —Å–µ—Ä–≤–∏—Å–∞:")
            try:
                openai_service = OpenAIService()
                print("‚úÖ OpenAI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
                return

            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("\n3. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
            connection_ok = openai_service.test_connection()
            if connection_ok:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return

            # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            print("\n4. –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
            try:
                result = openai_service.generate_blog_content(
                    topic="Test",
                    keywords="test",
                    language="en"
                )
                if result and 'title' in result:
                    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title'][:50]}...")
                else:
                    print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")

        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    diagnose_openai_issues()
