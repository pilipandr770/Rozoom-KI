#!/usr/bin/env python3
"""
fix_revision_issue.py

Скрипт для исправления ошибки с конкретной ревизией миграции '31dcbe661935'.
Создает пустой файл миграции с указанным ID или очищает таблицу alembic_version.
"""

import os
import sys
import datetime
import re
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# Загружаем переменные окружения
load_dotenv()

# ID проблемной ревизии
REVISION_ID = '31dcbe661935'

def create_empty_revision():
    """Создает пустой файл миграции с указанным ID"""
    try:
        # Путь к директории миграций
        migrations_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'migrations')
        versions_dir = os.path.join(migrations_dir, 'versions')
        
        # Проверяем, существует ли директория миграций
        if not os.path.exists(versions_dir):
            print(f"Создание директории миграций: {versions_dir}")
            os.makedirs(versions_dir, exist_ok=True)
        
        # Путь к файлу миграции
        migration_file = os.path.join(versions_dir, f'{REVISION_ID}_empty_revision.py')
        
        # Создаем пустой файл миграции с указанным ID
        with open(migration_file, 'w') as f:
            f.write(f"""
\"\"\"empty revision

Revision ID: {REVISION_ID}
Create Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
\"\"\"

# revision identifiers, used by Alembic.
revision = '{REVISION_ID}'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
""")
        
        print(f"Создана пустая миграция с ID {REVISION_ID}: {migration_file}")
        return True
    except Exception as e:
        print(f"Ошибка при создании пустой миграции: {str(e)}")
        return False

def clean_alembic_version():
    """Очищает таблицу alembic_version в базе данных"""
    try:
        # Получаем строку подключения из переменных окружения
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("Ошибка: Переменная окружения DATABASE_URL не найдена")
            return False
        
        # Исправляем URL для PostgreSQL, если он начинается с "postgres://" вместо "postgresql://"
        if database_url.startswith('postgres://'):
            database_url = database_url.replace('postgres://', 'postgresql://', 1)
        
        # Add SSL parameters for PostgreSQL connections (required for Render.com)
        if 'postgresql://' in database_url:
            if '?' not in database_url:
                database_url += '?sslmode=require'
            else:
                database_url += '&sslmode=require'
        
        # Создаем подключение к базе данных
        print("Подключение к базе данных...")
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # Проверяем, существует ли таблица alembic_version
            result = conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'alembic_version'
                );
            """))
            
            if result.scalar():
                print("Удаление содержимого таблицы alembic_version...")
                conn.execute(text("DELETE FROM alembic_version"))
                print("Таблица alembic_version успешно очищена")
                
                # Вставляем новый ID ревизии
                conn.execute(text(f"INSERT INTO alembic_version (version_num) VALUES ('{REVISION_ID}')"))
                print(f"Добавлена ревизия {REVISION_ID} в таблицу alembic_version")
            else:
                print("Таблица alembic_version не найдена, нечего очищать")
        
        return True
    except Exception as e:
        print(f"Ошибка при очистке таблицы alembic_version: {str(e)}")
        return False

def fix_revision_issue():
    """Исправляет проблему с ревизией двумя способами"""
    # Сначала создаем пустую миграцию с указанным ID
    success1 = create_empty_revision()
    
    # Затем очищаем таблицу alembic_version
    success2 = clean_alembic_version()
    
    return success1 or success2

if __name__ == "__main__":
    success = fix_revision_issue()
    sys.exit(0 if success else 1)
