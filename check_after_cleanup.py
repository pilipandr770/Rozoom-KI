#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª–æ–º–∞–ª–æ—Å—å.
"""

import os
import sys
import subprocess

def check_file_exists(filepath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        print(f"‚ùå {description}: –ù–ï –ù–ê–ô–î–ï–ù - {filepath}")
        return False

def check_directory_exists(dirpath, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if os.path.exists(dirpath):
        print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω–∞")
        return True
    else:
        print(f"‚ùå {description}: –ù–ï –ù–ê–ô–î–ï–ù–ê - {dirpath}")
        return False

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {description}")
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=30)

        if result.returncode == 0:
            print(f"‚úÖ {description}: —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå {description}: –æ—à–∏–±–∫–∞")
            print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result.returncode}")
            if result.stderr:
                print(f"   –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚ùå {description}: —Ç–∞–π–º–∞—É—Ç")
        return False
    except Exception as e:
        print(f"‚ùå {description}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ï–ö–¢–ê –ü–û–°–õ–ï –û–ß–ò–°–¢–ö–ò")
    print("=" * 50)

    all_good = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")

    critical_files = [
        ("run.py", "–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("requirements.txt", "–§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"),
        ("Procfile", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Heroku/Render"),
        ("render.yaml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Render"),
        (".env", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("app/__init__.py", "–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("app/models.py", "–ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("app/routes.py", "–ú–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("app/templates/base.html", "–ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω"),
        ("app/templates/index.html", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
        ("app/templates/services.html", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ª—É–≥"),
    ]

    for filepath, description in critical_files:
        if not check_file_exists(filepath, description):
            all_good = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")

    critical_dirs = [
        ("app", "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        ("app/templates", "–®–∞–±–ª–æ–Ω—ã"),
        ("app/static", "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"),
        ("migrations", "–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("logs", "–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    ]

    for dirpath, description in critical_dirs:
        if not check_directory_exists(dirpath, description):
            all_good = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Python
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")

    python_checks = [
        ("python --version", "–í–µ—Ä—Å–∏—è Python"),
        ("python -c \"import flask\"", "–ò–º–ø–æ—Ä—Ç Flask"),
        ("python -c \"import sqlalchemy\"", "–ò–º–ø–æ—Ä—Ç SQLAlchemy"),
        ("python -c \"from app import create_app\"", "–ò–º–ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
    ]

    for command, description in python_checks:
        if not run_command(command, description):
            all_good = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")

    try:
        from app import create_app
        app = create_app()
        with app.app_context():
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –æ—à–∏–±–∫–∞ - {e}")
        all_good = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")

    try:
        from app import create_app, db
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            db.engine.execute("SELECT 1")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ - {e}")
        all_good = False

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if all_good:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        print("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ git")

    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - –ø—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–º–º–∏—Ç–∞:")
    print("   git checkout HEAD~1")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é")

    return all_good

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
