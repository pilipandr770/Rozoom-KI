#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ production
"""
import os
import logging
from app import create_app

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n")

    app = create_app()

    with app.app_context():
        print("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Flask:")
        print(f"   FLASK_ENV: {os.getenv('FLASK_ENV', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}")
        print(f"   FLASK_APP: {os.getenv('FLASK_APP', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}")

        print("\n2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        database_url = os.getenv('DATABASE_URL', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        if database_url != '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞':
            print(f"   DATABASE_URL: {database_url[:50]}...")
            print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç sslmode: {'sslmode' in database_url}")
        else:
            print("   DATABASE_URL: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        print("\n3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ OpenAI:")
        openai_key = os.getenv('OPENAI_API_KEY', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        if openai_key != '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞':
            print(f"   OPENAI_API_KEY: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–¥–ª–∏–Ω–∞: {len(openai_key)})")
            print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'sk-': {openai_key.startswith('sk-')}")
            print(f"   –§–æ—Ä–º–∞—Ç: {'sk-proj-' if openai_key.startswith('sk-proj-') else 'sk-' if openai_key.startswith('sk-') else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}")
        else:
            print("   OPENAI_API_KEY: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        print("\n4. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—á—Ç—ã:")
        mail_vars = ['MAIL_SERVER', 'MAIL_PORT', 'MAIL_USERNAME', 'MAIL_PASSWORD']
        for var in mail_vars:
            value = os.getenv(var, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
            if value != '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞':
                print(f"   {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print(f"   {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        print("\n5. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print(f"   SECRET_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.config.get('SECRET_KEY') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   SQLALCHEMY_DATABASE_URI: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.config.get('SQLALCHEMY_DATABASE_URI') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"   OPENAI_API_KEY (–∏–∑ app.config): {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if app.config.get('OPENAI_API_KEY') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API –∫–ª—é—á–∞
        if app.config.get('OPENAI_API_KEY'):
            try:
                from app.services.openai_service import OpenAIService
                service = OpenAIService()
                success, message = service.test_connection()
                print(f"\n6. –¢–µ—Å—Ç OpenAI API: {'‚úÖ' if success else '‚ùå'} {message}")
            except Exception as e:
                print(f"\n6. –¢–µ—Å—Ç OpenAI API: ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        else:
            print("\n6. –¢–µ—Å—Ç OpenAI API: ‚ùå API –∫–ª—é—á –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")

if __name__ == "__main__":
    check_environment_variables()
