# –¶–µ–π —Ñ–∞–π–ª –¥–æ–¥–∞—Ç–∏ –¥–æ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –≤ Render.com
# –†–æ–∑–º—ñ—Å—Ç—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ—Ä–µ–Ω–µ–≤—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ø—Ä–æ–µ–∫—Ç—É

import os
import requests
import socket
import time
import sys
import logging
from datetime import datetime
from urllib3.util import connection

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger()

# –ó–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
original_create_connection = connection.create_connection

def patched_create_connection(address, *args, **kwargs):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è DNS —Ä–µ–∑–æ–ª–≤—ñ–Ω–≥—É"""
    host, port = address
    
    # –î–ª—è Telegram API –≤–∏–∫–æ–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É
    if 'api.telegram.org' in host:
        logger.info(f"Patched connection attempt to {host}:{port}")
        
        # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø—Ä–æ–±–∏ DNS —Ä–µ–∑–æ–ª–≤—ñ–Ω–≥—É
        for attempt in range(3):
            try:
                # –û—á–∏—â–∞—î–º–æ DNS –∫–µ—à (–≤ Linux —Ü–µ –º–æ–≥–ª–æ –± –±—É—Ç–∏ "systemd-resolve --flush-caches")
                socket.getaddrinfo(host, port)
                logger.info(f"Successfully resolved {host} on attempt {attempt+1}")
                break
            except socket.gaierror:
                logger.warning(f"DNS resolution failed for {host} on attempt {attempt+1}")
                time.sleep(1)
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    return original_create_connection(address, *args, **kwargs)

def check_render_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ Render.com"""
    is_render = "RENDER" in os.environ
    logger.info(f"Running on Render.com: {is_render}")
    return is_render

def check_env_variables():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    results = {
        'token_exists': bool(token),
        'chat_id_exists': bool(chat_id)
    }
    
    logger.info(f"Environment check: TELEGRAM_BOT_TOKEN exists: {results['token_exists']}")
    logger.info(f"Environment check: TELEGRAM_CHAT_ID exists: {results['chat_id_exists']}")
    
    return results

def test_dns_resolution():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DNS —Ä–µ–∑–æ–ª–≤—ñ–Ω–≥—É –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ —Å–ø—Ä–æ–±–∞–º–∏"""
    host = "api.telegram.org"
    results = []
    
    for attempt in range(3):
        try:
            start_time = time.time()
            ip_address = socket.gethostbyname(host)
            duration = time.time() - start_time
            logger.info(f"DNS resolution attempt {attempt+1}: Success, resolved to {ip_address} in {duration:.3f}s")
            results.append({"success": True, "ip": ip_address, "time": duration})
            break
        except socket.gaierror as e:
            logger.error(f"DNS resolution attempt {attempt+1} failed: {e}")
            results.append({"success": False, "error": str(e)})
            time.sleep(1)
    
    return results

def test_telegram_api():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ Telegram API"""
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ç—á –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º DNS —Ä–µ–∑–æ–ª–≤—ñ–Ω–≥–æ–º
    connection.create_connection = patched_create_connection
    
    try:
        start_time = time.time()
        response = requests.get("https://api.telegram.org/", timeout=10)
        duration = time.time() - start_time
        
        logger.info(f"API connectivity test: Status code {response.status_code}, took {duration:.3f}s")
        
        return {
            "success": response.status_code == 200,
            "status_code": response.status_code,
            "time": duration
        }
    except requests.exceptions.RequestException as e:
        logger.error(f"API connectivity test failed: {e}")
        return {"success": False, "error": str(e)}
    finally:
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        connection.create_connection = original_create_connection

def test_telegram_message(retries=3):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –∑ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏"""
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID')
    
    if not token or not chat_id:
        logger.error("Cannot test message sending: missing environment variables")
        return {"success": False, "error": "Missing environment variables"}
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ç—á –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    connection.create_connection = patched_create_connection
    
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message = f"üîç Render.com Diagnostic Test\nTimestamp: {timestamp}"
    
    for attempt in range(retries):
        try:
            logger.info(f"Sending test message, attempt {attempt+1}/{retries}")
            start_time = time.time()
            
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            response = requests.post(url, data={
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }, timeout=15)
            
            duration = time.time() - start_time
            
            if response.status_code == 200:
                logger.info(f"Message sent successfully in {duration:.3f}s")
                return {"success": True, "time": duration}
            else:
                logger.error(f"Failed to send message, status code: {response.status_code}")
                logger.error(f"Response: {response.text}")
                
                if attempt < retries - 1:
                    wait_time = 2 ** attempt  # –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø
                    logger.info(f"Retrying in {wait_time} seconds...")
                    time.sleep(wait_time)
        except Exception as e:
            logger.error(f"Error sending message on attempt {attempt+1}: {e}")
            
            if attempt < retries - 1:
                wait_time = 2 ** attempt
                logger.info(f"Retrying in {wait_time} seconds...")
                time.sleep(wait_time)
    
    return {"success": False, "error": "All retry attempts failed"}
    
def run_full_diagnostics():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("=" * 60)
    logger.info("TELEGRAM API DIAGNOSTIC TOOL FOR RENDER.COM")
    logger.info("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    is_render = check_render_environment()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    env_check = check_env_variables()
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DNS —Ä–µ–∑–æ–ª–≤—ñ–Ω–≥—É
    dns_results = test_dns_resolution()
    dns_success = any(result.get("success", False) for result in dns_results)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–æ API
    api_result = test_telegram_api()
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ
    message_result = None
    if env_check["token_exists"] and env_check["chat_id_exists"] and dns_success and api_result.get("success"):
        message_result = test_telegram_message()
    
    # –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    logger.info("=" * 60)
    logger.info("DIAGNOSTIC RESULTS")
    logger.info("=" * 60)
    logger.info(f"‚úÖ Running on Render.com: {is_render}")
    logger.info(f"{'‚úÖ' if env_check['token_exists'] else '‚ùå'} TELEGRAM_BOT_TOKEN: {'Present' if env_check['token_exists'] else 'Missing'}")
    logger.info(f"{'‚úÖ' if env_check['chat_id_exists'] else '‚ùå'} TELEGRAM_CHAT_ID: {'Present' if env_check['chat_id_exists'] else 'Missing'}")
    logger.info(f"{'‚úÖ' if dns_success else '‚ùå'} DNS Resolution: {'Successful' if dns_success else 'Failed'}")
    logger.info(f"{'‚úÖ' if api_result.get('success') else '‚ùå'} API Connectivity: {'Successful' if api_result.get('success') else 'Failed'}")
    
    if message_result:
        logger.info(f"{'‚úÖ' if message_result.get('success') else '‚ùå'} Message Sending: {'Successful' if message_result.get('success') else 'Failed'}")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∑–≤—ñ—Ç
    return {
        "timestamp": datetime.now().isoformat(),
        "is_render": is_render,
        "environment": env_check,
        "dns_resolution": dns_results,
        "api_connectivity": api_result,
        "message_sending": message_result
    }

if __name__ == "__main__":
    results = run_full_diagnostics()
    
    # –ó–∞–ø–∏—Å—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    with open("telegram_diagnostic_results.txt", "w") as f:
        f.write(str(results))
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É 0 —è–∫—â–æ –≤—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É—Å–ø—ñ—à–Ω—ñ
    critical_success = (
        results["environment"]["token_exists"] and 
        results["environment"]["chat_id_exists"] and
        any(r.get("success", False) for r in results["dns_resolution"]) and
        results["api_connectivity"].get("success", False)
    )
    
    sys.exit(0 if critical_success else 1)
